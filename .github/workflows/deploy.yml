name: Deploy Project to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Private Repository
        uses: actions/checkout@v4

      - name: Remove .git directory before copying
        run: rm -rf .git

      - name: Copy Files to Server via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ vars.SSH_PORT }}
          source: "./"
          target: "/home/${{ vars.SSH_USER }}/${{ github.event.repository.name }}"
          overwrite: true

      - name: Run Deployment Script on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ vars.SSH_PORT }}
          command_timeout: 45m
          script: |
            # Exit immediately if a command exits with a non-zero status.
            set -e

            # --- FAIL-FAST CHECK (in the runner) ---
            echo "Checking if secret is loaded in the GitHub Actions runner..."
            if [ -z "${{ secrets.NEW_RELIC_LICENSE_KEY }}" ]; then
              echo "::error:: NEW_RELIC_LICENSE_KEY secret is EMPTY or NOT SET in the runner."
              echo "Go to Repository > Settings > Secrets and Variables > Actions to set it."
              exit 1
            else
              echo "Secret appears to be loaded in the runner. Proceeding to server."
            fi

            # --- Environment and Path Configuration ---
            PROJECT_DIR="/home/${{ vars.SSH_USER }}/${{ github.event.repository.name }}"
            PM2_CONF_PATH="/home/${{ vars.SSH_USER }}/.pm2-configs/${{ github.event.repository.name }}"

            # Ensure directories exist
            mkdir -p $PROJECT_DIR
            mkdir -p $PM2_CONF_PATH

            # --- Configure Application ---
            cd $PROJECT_DIR

            echo "Creating application config files..."

            # Create ecosystem.config.js with the secret injected
            cat << EOF > ecosystem.config.js
            module.exports = {
              apps: [{
                name: '${{ github.event.repository.name }}',
                script: 'start.sh',
                watch: false,
                env: {
                  "NEW_RELIC_LICENSE_KEY": "${{ secrets.NEW_RELIC_LICENSE_KEY }}"
                }
              }]
            };
            EOF

            # --- CRITICAL DEBUG STEP ---
            # Display the contents of the file we just created on the server.
            echo "--- ðŸ”Ž DEBUG: Contents of ecosystem.config.js on the server ---"
            cat ecosystem.config.js
            echo "----------------------------------------------------------------"

            # Create the start.sh wrapper script
            cat << EOF > start.sh
            #!/bin/bash
            # This script sets up the environment and runs the application.
            SCRIPT_DIR=\$(cd -- "\$(dirname -- "\${BASH_SOURCE[0]}")" &> /dev/null && pwd)
            cd "\$SCRIPT_DIR" || exit
            source .venv/bin/activate
            export NEW_RELIC_CONFIG_FILE="\$SCRIPT_DIR/newrelic.ini"
            python ${{ github.event.repository.name }}.py
            EOF
            chmod +x start.sh

            # --- System & Python Dependencies ---
            echo "Ensuring system dependencies and Python environment are set up..."
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init --path)"
            pyenv global 3.11.9

            # --- Set up Python Virtual Environment ---
            echo "Setting up Python virtual environment..."
            if [ -d ".venv" ]; then
              rm -rf .venv
            fi
            python -m venv .venv
            source .venv/bin/activate
            pip install -r requirements.txt

            # --- Manage the Isolated PM2 Instance ---
            echo "Starting or reloading application with isolated PM2 instance..."
            export PM2_HOME=$PM2_CONF_PATH

            pm2 delete ${{ github.event.repository.name }} || true
            pm2 start ecosystem.config.js
            pm2 save

            # --- Configure Persistence via Cron ---
            echo "Configuring persistence for this instance via cron..."
            CRON_JOB="@reboot export PM2_HOME=${PM2_CONF_PATH} && /home/${{ vars.SSH_USER }}/.pyenv/shims/pyenv exec pm2 resurrect"
            (crontab -l 2>/dev/null | grep -v -F "PM2_HOME=${PM2_CONF_PATH}" ; echo "${CRON_JOB}") | crontab -

            echo "Deployment for ${{ github.event.repository.name }} complete."